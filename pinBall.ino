#include <SPI.h>
#include <Gamebuino.h>
Gamebuino gb;


const byte background[] PROGMEM = {88,48,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x7F,0xFE,0xDA,0x40,0xFF,0xD0,0x0,0x0,0x0,0x70,0x0,0x0,0xFE,0xA,0xA0,0xFF,0xA0,0x0,0x0,0x0,0xF8,0x0,0x0,0xE,0xF9,0x20,0xFF,0x41,0xFF,0xF0,0x1,0x6C,0x0,0x0,0x1,0xF8,0x0,0xFE,0x82,0x0,0x0,0x1,0x4,0x3F,0x80,0x0,0x79,0x0,0xFD,0x4,0x0,0x0,0x1,0x7C,0xF,0xFF,0x0,0x3A,0x80,0xFA,0x8,0x0,0x0,0x0,0xF8,0x0,0x7F,0xF0,0x3A,0x80,0xF4,0x10,0xFF,0xFC,0x0,0x70,0x0,0x0,0xFC,0x18,0x0,0xE8,0x21,0xFF,0xFE,0x0,0x0,0x0,0x0,0xE,0x19,0x0,0xD0,0x1,0xF0,0x0,0x0,0x0,0x0,0x0,0x6,0x1A,0x80,0xA0,0x1,0xC0,0x0,0x0,0x0,0x0,0x0,0x6,0x19,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x8,0x0,0x80,0x0,0x1,0xF0,0x0,0x0,0x0,0x0,0x3,0xB,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x8,0x80,0x0,0x1,0xF0,0x0,0x0,0x70,0x0,0x1C,0x1,0x8,0x80,0x0,0x0,0x0,0x0,0x0,0xF8,0x0,0x3E,0x1,0x8,0x0,0x0,0x0,0x1,0xF0,0x1,0x14,0x0,0x55,0x0,0xB,0x80,0x0,0x0,0x0,0x0,0x1,0x54,0x0,0x55,0x0,0xA,0x80,0x0,0x1,0xF0,0x0,0x1,0x44,0x0,0x41,0x0,0xA,0x0,0x0,0x0,0x0,0x0,0x0,0xF8,0x0,0x3E,0x0,0x8,0x0,0x0,0x0,0x1,0xF0,0x0,0x70,0x0,0x1C,0x0,0xA,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x1,0xF0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x1,0xF0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x1,0xF0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x70,0x0,0x0,0x0,0x8,0x0,0x80,0x0,0x1,0xF0,0x0,0xF8,0x0,0x0,0x0,0x8,0x0,0x40,0x0,0x0,0x0,0x1,0x6C,0x0,0x0,0x0,0x8,0x0,0xA0,0x1,0xC0,0x0,0x1,0x4,0x0,0x3E,0x18,0x8,0x0,0xD0,0x1,0xF0,0x0,0x1,0x7C,0x1,0xD5,0xC,0x8,0x0,0xE8,0x21,0xFF,0xFE,0x0,0xF8,0xF,0xD5,0xC,0x8,0x0,0xF4,0x10,0xFF,0xFC,0x0,0x70,0x7,0xC1,0xE,0x8,0x0,0xFA,0x8,0x0,0x0,0x0,0x0,0x3,0xFF,0xE,0x8,0x0,0xFD,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0xE,0x18,0x0,0xFE,0x82,0x0,0x0,0x0,0x0,0x20,0x0,0xE,0x18,0x0,0xFF,0x41,0xFF,0xF0,0x0,0x0,0x30,0x0,0x1C,0x18,0x0,0xFF,0xA0,0x0,0x0,0x0,0x0,0x3C,0x0,0xF8,0x18,0x0,0xFF,0xD0,0x0,0x0,0x0,0x0,0x3F,0xFF,0xF0,0x38,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x3F,0xFF,0x0,0x38,0x0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x80,0x0,0x78,0x0,0xFF,0xF8,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0xF8,0x0,0xFF,0xF8,0x0,0x0,0x0,0x0,0x0,0x0,0xF,0xF8,0x0,0xFF,0xF8,0x0,0x0,0x0,0x0,0x0,0x0,0xFF,0xF8,0x0,0xFF,0xF8,0x0,0x0,0x0,0x0,0x0,0x7F,0xFF,0xF8,0x0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x0,};
const byte ball[] PROGMEM = {8,4,0x60,0xF0,0xD0,0x60,};
const byte flipperBas[] PROGMEM = {8,7,0x60,0x60,0xE0,0xC0,0xC0,0x80,0x80,};
const byte flipperHaut[] PROGMEM = {8,6,0x40,0xE0,0x20,0x30,0x18,0x4,};
const byte ressortBAs[] PROGMEM = {8,4,0x8,0x58,0xA8,0x8,};
const byte ressortHaut[] PROGMEM = {16,4,0x0,0x40,0xAA,0xC0,0x55,0x40,0x0,0x40,};

byte vieRestante = 2;
boolean isRessortHaut = true;
boolean isLeftFlipperPressed = false;
boolean isRightFlipperPressed = false;
float gravite = -0.2;
float forceRessort = 6;
#define MAX_VITESSE_BALL 6
#define TIME_FORCE  5
byte timeForce = 0;


typedef struct{
  float x, y, r, vx, vy;
} Circle;

Circle Ball;

void setup()
{
  gb.begin();
  goTitleScreen();
  gb.setFrameRate(60);
}

void initGame()
{
  gb.battery.show = false;
  vieRestante = 2;
  Ball.x = 40;
  Ball.y = 43;
}


void loop()
{
 if(gb.update())
 {
   updateWorld();
   updateBall();
   drawBall();
   drawWorld();
 }
}

void updateWorld()
{
  if(timeForce>0)
  {
    timeForce--;
  }
  isRessortHaut = true;
  isLeftFlipperPressed = false;
  isRightFlipperPressed = false;
  if(gb.buttons.repeat(BTN_LEFT,1))
  {
    isRessortHaut = false;
     
    timeForce = TIME_FORCE;
  }
  if(gb.buttons.repeat(BTN_UP,1))
  {
    isLeftFlipperPressed = true;
  }
  if(gb.buttons.repeat(BTN_DOWN,1))
  {
    isRightFlipperPressed = true;
  }
}

void updateBall()
{
  Ball.vx += gravite; 
  if(abs(Ball.vx)>MAX_VITESSE_BALL) Ball.vx = (Ball.vx>0)? MAX_VITESSE_BALL: -MAX_VITESSE_BALL ;
  if(gb.collideRectRect(13,43,((isRessortHaut)? 10 : 5),4,Ball.x,Ball.y,2,2))
  {
    if(isRessortHaut)
    {
      if(timeForce>0)
      {
        float percent = 1 - ((Ball.x - 18)/5);
        float force = forceRessort * percent;    
        Ball.vx += force;
        Ball.x = 23;
      }
    }
    else 
    {
        Ball.x = 18;
    }
    
    if(Ball.vx<0)
    {
      Ball.vx = -Ball.vx*0.5;
    }
  }
  
  Ball.x += Ball.vx;
  Ball.y += Ball.vy;
  
  //prevent circles from going out of the screen :
  /*if(circles[i].x < 0){
    circles[i].vx *= -1;
    circles[i].x = 0;
  }*/
  if(circles[i].x > LCDWIDTH){
    circles[i].vx *= -1;
    circles[i].x = LCDWIDTH;
  }

  if(circles[i].y < 0){
    circles[i].vy *= -1;
    circles[i].y = 0;
  }
  if(circles[i].y > LCDHEIGHT){
    circles[i].vy *= -1;
    circles[i].y = LCDHEIGHT;
  }
   
  if(Ball.x<-5)
  {
    Ball.vx = 0;
    Ball.vy = 0;
    Ball.x = 40;
    Ball.y = 43;
  }
}

void drawBall()
{
  gb.display.drawBitmap(Ball.x,Ball.y, ball);
}

void drawWorld()
{
  gb.display.drawBitmap(0,0,background);
  gb.display.drawBitmap(8,24, ((isRightFlipperPressed)? flipperHaut : flipperBas),0,FLIPV);
  gb.display.drawBitmap(8,11, ((isLeftFlipperPressed)? flipperHaut : flipperBas));
  gb.display.drawBitmap(13,43, ((isRessortHaut)? ressortHaut : ressortBAs));
  gb.display.setColor(INVERT);
  for(byte i=0;i<vieRestante;i++)
  {
    gb.display.drawBitmap(2+ (i*5),43, ball);
  }
  gb.display.setColor(BLACK);
}

